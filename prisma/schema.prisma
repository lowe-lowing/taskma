// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("POSTGRES_PRISMA_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String          @id @unique @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  UserWorkspace UserWorkspace[]
  UserBoards    UserBoard[]
}

model Workspace {
  id             String          @id @unique @default(cuid())
  Name           String
  Boards         Board[]
  UserWorkspaces UserWorkspace[]
}

model UserWorkspace {
  id          String        @id @unique @default(cuid())
  User        User          @relation(fields: [userId], references: [id])
  userId      String
  Workspace   Workspace     @relation(fields: [workspaceId], references: [id])
  workspaceId String
  Role        WorkspaceRole
}

enum WorkspaceRole {
  Owner
  Admin
  Member
}

model Board {
  id          String      @id @unique @default(cuid())
  Name        String
  Lanes       Lane[]
  Workspace   Workspace?  @relation(fields: [workspaceId], references: [id])
  workspaceId String?
  UserBoards  UserBoard[]
}

model UserBoard {
  id      String    @id @unique @default(cuid())
  User    User      @relation(fields: [userId], references: [id])
  userId  String
  Board   Board     @relation(fields: [boardId], references: [id])
  boardId String
  Role    BoardRole
  addedBy AddedBy   @default(Invite)
}

enum BoardRole {
  Creator
  Admin
  Editor
  Viewer
}

enum AddedBy {
  Invite
  BoardCreation
  AdminRolechange
}

model Lane {
  id      String  @id @unique @default(cuid())
  Name    String
  Tasks   Task[]
  Order   Int
  Board   Board?  @relation(fields: [boardId], references: [id])
  boardId String?
}

model Task {
  id          String    @id @unique @default(cuid())
  Title       String
  Description String?
  CreatedAt   DateTime? @default(now())
  UpdatedAt   DateTime? @updatedAt
  DueDate     DateTime?
  Order       Int
  Lane        Lane?     @relation(fields: [laneId], references: [id], onDelete: Cascade)
  laneId      String?
}
