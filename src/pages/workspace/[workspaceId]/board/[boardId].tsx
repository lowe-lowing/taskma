import Board from "@/components/dnd/board/Board";
import { trpc } from "@/lib/trpc";
import { NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useState } from "react";

const BoardView: NextPage = () => {
  const [newLaneName, setNewLaneName] = useState("");

  const router = useRouter();
  const boardId = router.query.boardId as string;

  const { data: board, refetch: refetchLanes } =
    trpc.board.getBoardById.useQuery(
      {
        boardId,
      },
      { enabled: !!boardId }
    );
  const { mutateAsync: addLane } = trpc.lane.createLane.useMutation();

  const handleAddLane = async (e: React.SyntheticEvent) => {
    e.preventDefault();
    await addLane({
      boardId,
      name: newLaneName,
      order: board?.Lanes?.length || 0,
    });
    refetchLanes();
  };

  return (
    <>
      <Head>
        <title>{board?.Name}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="relative flex h-[calc(100vh-40px)] flex-col items-center overflow-x-hidden pt-1">
        <div>Board: {board?.Name}</div>
        {/* <form onSubmit={handleAddLane} className="flex flex-row gap-1 p-2">
          <input
            type="text"
            value={newLaneName}
            onChange={(e) => setNewLaneName(e.target.value)}
            className="border-2"
          />
          <Button>Add Lane</Button>
        </form> */}
        {board?.Lanes ? (
          <Board
            initial={board.Lanes}
            boardId={boardId}
            containerHeight={500}
            useClone={false}
            withScrollableColumns={false}
            refetchLanes={refetchLanes}
            isCombineEnabled={false}
          />
        ) : (
          <div>loading</div>
        )}
      </main>
    </>
  );
};

export default BoardView;
